[
  
   
      {
        "title"    : "React - Context System with React",
        "category" : "",
        "tags"     : " react, context",
        "url"      : "/udemy-react/2019/01/09/context.html",
        "date"     : "January 9, 2019",
        "excerpt"  : "<h3 id=\"props-system\">Props System</h3>\n<ul>\n  <li>Gets data from a parent component to a direct child component</li>\n</ul>\n\n<h3 id=\"context-system\">Context System</h3>\n<ul>\n  <li>Gets data from a parent component to any arbitrary nested child com...",
        "content"  : "<h3 id=\"props-system\">Props System</h3>\n<ul>\n  <li>Gets data from a parent component to a direct child component</li>\n</ul>\n\n<h3 id=\"context-system\">Context System</h3>\n<ul>\n  <li>Gets data from a parent component to any arbitrary nested child component, so it does not have to be a direct one to one communication as props system.</li>\n</ul>\n\n<h4 id=\"two-ways-to-get-information-out-of-or-into-a-context-object\">Two ways to get information out of or into a context object</h4>\n<p><img src=\"/assets/img/posts/2019-01-09-context-two-way.png\" alt=\"context\" /></p>\n<ul>\n  <li>Get information into a context object\n    <ol>\n      <li>Setting up a default value</li>\n      <li>Creating a provider component in a parent component</li>\n    </ol>\n  </li>\n  <li>Get infomation out of a context object\n    <ol>\n      <li>Reference a context property inside of a nested child component</li>\n      <li>Creating a component called a consumer inside a nested child component, when we have multiple context objects</li>\n    </ol>\n  </li>\n</ul>\n\n<h4 id=\"example-with-context\">Example with Context</h4>\n<p>App component as below is able to communicate to Button/Field components without UserCreate with a context object\n<img src=\"/assets/img/posts/2019-01-09-context.png\" alt=\"example\" /></p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// LanguageContext.js - Context object</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Set a \"default value\"</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createContext</span><span class=\"p\">(</span><span class=\"s1\">'english'</span><span class=\"p\">);</span> </code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Field.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">LanguageContext</span> <span class=\"k\">from</span> <span class=\"s1\">'../contexts/LanguageContext'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Field</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Reference a context property inside of a nested child component</span>\n    <span class=\"c1\">// It should be called \"contextType\" exactly</span>\n    <span class=\"kr\">static</span> <span class=\"nx\">contextType</span> <span class=\"o\">=</span> <span class=\"nx\">LanguageContext</span><span class=\"p\">;</span> \n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Upon the context, the text will be changed</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span> <span class=\"o\">===</span> <span class=\"s1\">'english'</span> <span class=\"p\">?</span> <span class=\"s1\">'Name'</span> <span class=\"p\">:</span> <span class=\"s1\">'이름'</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui field\"</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">label</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">text</span> <span class=\"p\">}:</span><span class=\"o\">&lt;</span><span class=\"sr\">/label</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"nx\">input</span> <span class=\"o\">/&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Field</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Button.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">LanguageContext</span> <span class=\"k\">from</span> <span class=\"s1\">'../contexts/LanguageContext'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Button</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui button primary\"</span><span class=\"o\">&gt;</span>\n            <span class=\"p\">{</span><span class=\"cm\">/* Creating a component called a consumer inside a nested child component */</span><span class=\"p\">}</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">LanguageContext</span><span class=\"p\">.</span><span class=\"nx\">Consumer</span><span class=\"o\">&gt;</span>\n                <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">value</span> <span class=\"o\">===</span> <span class=\"s1\">'english'</span><span class=\"p\">?</span> <span class=\"s1\">'Submit'</span> <span class=\"p\">:</span> <span class=\"s1\">'제출'</span><span class=\"p\">}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/LanguageContext.Consumer</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Button</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// App.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">UserCreate</span> <span class=\"k\">from</span> <span class=\"s1\">'./UserCreate'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">LanguageContext</span> <span class=\"k\">from</span> <span class=\"s1\">'../contexts/LanguageContext'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n    <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">language</span><span class=\"p\">:</span> <span class=\"s1\">'english'</span> <span class=\"p\">};</span>\n\n    <span class=\"nx\">onLanguageChange</span> <span class=\"o\">=</span> <span class=\"nx\">language</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"nx\">language</span> <span class=\"p\">});</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui container\"</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                    <span class=\"nx\">Select</span> <span class=\"nx\">a</span> <span class=\"na\">language</span><span class=\"p\">:</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">i</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"flag us\"</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onLanguageChange</span><span class=\"p\">(</span><span class=\"s1\">'english'</span><span class=\"p\">)</span> <span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                    <span class=\"o\">&lt;</span><span class=\"nx\">i</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"flag kr\"</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onLanguageChange</span><span class=\"p\">(</span><span class=\"s1\">'dutch'</span><span class=\"p\">)</span> <span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                <span class=\"p\">{</span><span class=\"cm\">/* Creating a provider component in a parent component to get information from the context object */</span><span class=\"p\">}</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">LanguageContext</span><span class=\"p\">.</span><span class=\"nx\">Provider</span> <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">language</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">UserCreate</span> <span class=\"o\">/&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"sr\">/LanguageContext.Provider</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></figure>\n\n<h4 id=\"example-repository\">Example Repository</h4>\n<p><a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/23.translate\">Here</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React App Practice02 - Video Streaming App",
        "category" : "",
        "tags"     : " react, redux, react-redux, app-practice",
        "url"      : "/udemy-react/2019/01/01/stream-app.html",
        "date"     : "January 1, 2019",
        "excerpt"  : "<p>This post is about a video stream app that I made through <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n<h3 id=\"screen-shot\">Screen Shot</h3>\n<p><img src=\"/assets/img/posts/2019-01-08-streamy.png\" alt=\"streamy\" ...",
        "content"  : "<p>This post is about a video stream app that I made through <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n<h3 id=\"screen-shot\">Screen Shot</h3>\n<p><img src=\"/assets/img/posts/2019-01-08-streamy.png\" alt=\"streamy\" /></p>\n\n<h3 id=\"features-with-the-course\">Features with the course</h3>\n<ul>\n  <li>Navigator with routing</li>\n  <li>Login/Logout with Google OAuth to manage a stream/channel and comments</li>\n  <li>List of all the streams with a simple description underneath it</li>\n  <li>Detail pages to show a streamed video</li>\n  <li>Every user can create/retrieve/delete/edit unlimited streams/channels</li>\n</ul>\n\n<h3 id=\"fetures-that-i-updated\">Fetures that I updated</h3>\n<ul>\n  <li>Every user can make/retrieve/delete a comment to/from each stream/channels</li>\n  <li>Add categories to filter streams</li>\n</ul>\n\n<h3 id=\"skills\">Skills</h3>\n<ul>\n  <li>Client: React, Redux</li>\n  <li>API Server: JSON Server</li>\n  <li>RTMP Server: <a href=\"https://github.com/illuspas/Node-Media-Server\">Node-Media-Server</a></li>\n</ul>\n\n<h3 id=\"libraries\">Libraries</h3>\n<ul>\n  <li>react</li>\n  <li>redux</li>\n  <li>react-redux</li>\n  <li>axios</li>\n  <li>redux-thunk</li>\n  <li>redux-form</li>\n  <li>react-router-dom</li>\n  <li>lodash</li>\n  <li>dateformat</li>\n  <li>json-server</li>\n  <li><a href=\"https://github.com/illuspas/Node-Media-Server\">node-media-server</a></li>\n  <li><a href=\"https://obsproject.com/\">OBS Studio</a></li>\n</ul>\n\n<h3 id=\"repository\">Repository</h3>\n<p><a href=\"https://github.com/nh0627/react-video-stream\">Here</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React09 - React Portal",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/30/react-portal.html",
        "date"     : "December 30, 2018",
        "excerpt"  : "<p>It would be hard to create a modal window in a React app. This is because it is difficult to load a modal component into other components due to a complicated component hierarchy(a component is a child of another component that is also a child ...",
        "content"  : "<p>It would be hard to create a modal window in a React app. This is because it is difficult to load a modal component into other components due to a complicated component hierarchy(a component is a child of another component that is also a child of other components…) in React. Instead, we need to break the component hierarchy with a portal which allows us to render an element not as a direct child of a component, but as some child of other elements inside HTML structure.</p>\n\n<h3 id=\"create-a-modal-window-with-a-portal\">Create a modal window with a portal</h3>\n\n<h4 id=\"basic-syntax\">Basic syntax</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// \"child\" is a React child that we want to render</span>\n<span class=\"c1\">// \"container\" is a location at HTML DOM that we want to put the child</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">createPortal</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">,</span> <span class=\"nx\">container</span><span class=\"p\">)</span> </code></pre></figure>\n\n<h4 id=\"example-modal-code\">Example modal code</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// Modal.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// This modal will be rendered at &lt;div id=\"modal\"&gt;&lt;/div&gt; in index.html</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Modal</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">createPortal</span><span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onDismiss</span><span class=\"p\">}</span> \n            <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui dimmer modals visible active\"</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{(</span><span class=\"nx\">e</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">stopPropagation</span><span class=\"p\">()}</span>\n                <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui standard modal visible active\"</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"header\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"content\"</span><span class=\"o\">&gt;</span>\n                    <span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span><span class=\"p\">}</span>\n                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"actions\"</span><span class=\"o\">&gt;</span>\n                    <span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">actions</span><span class=\"p\">}</span>\n                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">,\n</span>        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#modal'</span><span class=\"p\">)</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Modal</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux05 - RESTful with React-Redux",
        "category" : "",
        "tags"     : " react, redux, react-redux, restful",
        "url"      : "/udemy-react/2018/12/29/restful-react-redux.html",
        "date"     : "December 29, 2018",
        "excerpt"  : "<p>RESTful convention refers to a standard system of routes and request methods used to commit or operate actions. It is highly recommended to make a network request to our API server and also cooperate with other engineers. I made a simple exampl...",
        "content"  : "<p>RESTful convention refers to a standard system of routes and request methods used to commit or operate actions. It is highly recommended to make a network request to our API server and also cooperate with other engineers. I made a simple example of how to implement the RESTful convention into our React-redux app as below action creators and reducers. The displayed code below is from <a href=\"https://nh0627.github.io/blog/stream-app/\">the stream video app</a>, you can check the project’s document and repo in the link.</p>\n\n<h3 id=\"restful-convention\">Restful Convention</h3>\n<p><img src=\"/assets/img/posts/2018-12-29-restful.png\" alt=\"structure\" /></p>\n\n<h3 id=\"example-codes-in-restful-convention\">Example codes in RESTful Convention</h3>\n\n<h4 id=\"action-creators-to-send-ajax-request\">Action Creators to send AJAX request</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// /src/actions/index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">streams</span> <span class=\"k\">from</span> <span class=\"s1\">'../apis/axios/streams'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">createStream</span> <span class=\"o\">=</span> <span class=\"nx\">formValues</span> <span class=\"o\">=&gt;</span> <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">streams</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/streams'</span><span class=\"p\">,</span> <span class=\"nx\">formValues</span><span class=\"p\">);</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'CREATE_STREAM'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">fetchStreams</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">streams</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/streams'</span><span class=\"p\">);</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'FETCH_STREAMS'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">fetchStream</span> <span class=\"o\">=</span> <span class=\"nx\">id</span> <span class=\"o\">=&gt;</span> <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">streams</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s2\">`/streams/</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'FETCH_STREAM'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">editStream</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">formValues</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// put(): Update all properties of record </span>\n    <span class=\"c1\">// const response = await streams.put(`streams/${id}`, formValues) </span>\n    <span class=\"c1\">// patch(): Update some properties of record that needs to be updated</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">streams</span><span class=\"p\">.</span><span class=\"nx\">patch</span><span class=\"p\">(</span><span class=\"s2\">`streams/</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">,</span> <span class=\"nx\">formValues</span><span class=\"p\">);</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'EDIT_STREAM'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">deleteStream</span> <span class=\"o\">=</span> <span class=\"nx\">id</span> <span class=\"o\">=&gt;</span> <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">await</span> <span class=\"nx\">streams</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"s2\">`streams/</span><span class=\"p\">${</span><span class=\"nx\">id</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">);</span>\n    <span class=\"nx\">dispatch</span><span class=\"p\">({</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'DELETE_STREAM'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">id</span> <span class=\"p\">});</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h4 id=\"reducers-to-take-the-actions\">Reducers to take the actions</h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// /src/reducers/streamReducer.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">_</span> <span class=\"k\">from</span> <span class=\"s1\">'lodash'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Key interpolation syntax</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Map keys is a function that's going to take an array and then return an object that keys of</span>\n        <span class=\"c1\">// this new object are going to be taken from each individual record(as its id) inside of the array.</span>\n        <span class=\"k\">case</span> <span class=\"na\">FETCH_STREAMS</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">mapKeys</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">,</span> <span class=\"s1\">'id'</span><span class=\"p\">)</span> <span class=\"p\">};</span>\n\n        <span class=\"c1\">// Whenever we get a action with FETCH_STREAM, we are taking our state object and its properties </span>\n        <span class=\"c1\">// and add it to the new object with a new key value pair dynamically.</span>\n        <span class=\"k\">case</span> <span class=\"na\">FETCH_STREAM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span> <span class=\"p\">};</span>\n        <span class=\"k\">case</span> <span class=\"na\">CREATE_STREAM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span> <span class=\"p\">};</span>\n        <span class=\"k\">case</span> <span class=\"na\">EDIT_STREAM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">]:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span> <span class=\"p\">};</span>\n\n        <span class=\"c1\">// omit is not changing the original state object, it rather creates a new object with all the properties from the state</span>\n        <span class=\"k\">case</span> <span class=\"na\">DELETE_STREAM</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">_</span><span class=\"p\">.</span><span class=\"nx\">omit</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">);</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nx\">state</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span></code></pre></figure>\n\n<h3 id=\"full-project-doc--repo\">Full Project Doc &amp; Repo</h3>\n<p><a href=\"https://nh0627.github.io/blog/stream-app/\">Doc</a> / <a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/16.steams-with-streaming\">Repo</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux04 - Redux Form",
        "category" : "",
        "tags"     : " react, redux, react-redux",
        "url"      : "/udemy-react/2018/12/29/redux-form.html",
        "date"     : "December 29, 2018",
        "excerpt"  : "<p>Redux Form can be helpful for us to store form data inside of our Redux store. Here is how it handels form data and how we can implement it into our app. The displayed code below is from <a href=\"https://nh0627.github.io/blog/stream-app/\">the s...",
        "content"  : "<p>Redux Form can be helpful for us to store form data inside of our Redux store. Here is how it handels form data and how we can implement it into our app. The displayed code below is from <a href=\"https://nh0627.github.io/blog/stream-app/\">the stream video app</a>, you can check the project’s document and repo in the link.</p>\n\n<h3 id=\"command-to-install-redux-form\">Command to install Redux Form</h3>\n<p>npm install –save redux-form</p>\n\n<h3 id=\"how-redux-form-works\">How Redux Form works?</h3>\n<p><img src=\"/assets/img/posts/2018-12-29-redux-form.png\" alt=\"structure\" /></p>\n<ul>\n  <li>Form data exists in a redux store and will be maintained by a reducer.</li>\n  <li>mapStateToProps takes form data from a redux store and get it into components as props.</li>\n  <li>Prop objects and all the values inside will be passed into input elements as values.</li>\n  <li>When a user make changes input elements, a callback handler in our component will be invoked.</li>\n  <li>It goes to an action creator that can update form data in a redux store.</li>\n</ul>\n\n<h3 id=\"adding-redux-form-into-our-app\">Adding Redux Form into our app</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// /src/reducers/index.js</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">combineReducers</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">reducer</span> <span class=\"k\">as</span> <span class=\"nx\">formReducer</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux-form'</span><span class=\"p\">;</span> <span class=\"c1\">// Add this</span>\n<span class=\"k\">import</span> <span class=\"nx\">authReducer</span> <span class=\"k\">from</span> <span class=\"s1\">'./authReducer'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">combineReducers</span><span class=\"p\">({</span>\n    <span class=\"na\">auth</span><span class=\"p\">:</span> <span class=\"nx\">authReducer</span><span class=\"p\">,</span>\n    <span class=\"na\">form</span><span class=\"p\">:</span> <span class=\"nx\">formReducer</span>\n<span class=\"p\">});</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Field</span><span class=\"p\">,</span> <span class=\"nx\">reduxForm</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux-form'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">StreamForm</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// We can set error message if input form touched</span>\n    <span class=\"nx\">renderError</span><span class=\"p\">({</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">touched</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">touched</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui error message\"</span><span class=\"o\">&gt;</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"header\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">error</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// We can customize what form element we want to show</span>\n    <span class=\"nx\">renderInput</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">label</span><span class=\"p\">,</span> <span class=\"nx\">meta</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"s2\">`field </span><span class=\"p\">${</span><span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">touched</span> <span class=\"p\">?</span> <span class=\"s1\">'error'</span> <span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">className</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">label</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">label</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/label</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"nx\">input</span> <span class=\"p\">{...</span><span class=\"nx\">input</span><span class=\"p\">}</span> <span class=\"c1\">// It takes take all the properties out there and add them as props to the input element.</span>\n                    <span class=\"nx\">autoComplete</span><span class=\"o\">=</span><span class=\"s2\">\"off\"</span>    \n                <span class=\"o\">/&gt;</span>\n                <span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderError</span><span class=\"p\">(</span><span class=\"nx\">meta</span><span class=\"p\">)}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">onSubmit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">formValues</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onSubmit</span><span class=\"p\">(</span><span class=\"nx\">formValues</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">form</span> \n                <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">handleSubmit</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onSubmit</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n                <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui form error\"</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Field</span> \n                    <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">\"title\"</span> \n                    <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderInput</span><span class=\"p\">}</span> <span class=\"c1\">// we have to assign this component prop</span>\n                    <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Title\"</span><span class=\"o\">/&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Field</span> \n                    <span class=\"nx\">name</span><span class=\"o\">=</span><span class=\"s2\">\"description\"</span> \n                    <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderInput</span><span class=\"p\">}</span> \n                    <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Description\"</span><span class=\"o\">/&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui button primary\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Submit</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/form</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Check validation</span>\n<span class=\"kd\">const</span> <span class=\"nx\">validate</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">formValues</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">errors</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">formValues</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'You must enter a title'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">formValues</span><span class=\"p\">.</span><span class=\"nx\">description</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">description</span> <span class=\"o\">=</span> <span class=\"s1\">'You must enter a description'</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">errors</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">reduxForm</span><span class=\"p\">({</span>\n    <span class=\"na\">form</span><span class=\"p\">:</span> <span class=\"s1\">'streamForm'</span><span class=\"p\">,</span>\n    <span class=\"nx\">validate</span>\n<span class=\"p\">})(</span><span class=\"nx\">StreamForm</span><span class=\"p\">);</span></code></pre></figure>\n\n<h3 id=\"full-project-doc--repo\">Full Project Doc &amp; Repo</h3>\n<p><a href=\"https://nh0627.github.io/blog/stream-app/\">Doc</a> / <a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/16.steams-with-streaming\">Repo</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux03 - Rules of Reducers",
        "category" : "",
        "tags"     : " react, redux, react-redux",
        "url"      : "/udemy-react/2018/12/28/redux-reducers.html",
        "date"     : "December 28, 2018",
        "excerpt"  : "<h3 id=\"rules-of-reducers\">Rules of Reducers</h3>\n<ul>\n  <li>Produces ‘state’ or data to be used inside of your app using only previous state and the action</li>\n  <li>Must return any value besides ‘undefine’</li>\n</ul>\n\n<figure class=\"highlight\">...",
        "content"  : "<h3 id=\"rules-of-reducers\">Rules of Reducers</h3>\n<ul>\n  <li>Produces ‘state’ or data to be used inside of your app using only previous state and the action</li>\n  <li>Must return any value besides ‘undefine’</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">export</span> <span class=\"k\">default</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Error: it should always have return statement!</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<ul>\n  <li>Must not return reach ‘out of itself’ to decide what value to return(reducers are pure)</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">export</span> <span class=\"k\">default</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// bad!</span>\n    <span class=\"k\">return</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'input'</span><span class=\"p\">);</span>\n    <span class=\"c1\">// bad!</span>\n    <span class=\"k\">return</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/posts'</span><span class=\"p\">);</span>\n    <span class=\"c1\">// good</span>\n    <span class=\"k\">return</span> <span class=\"nx\">state</span> <span class=\"o\">+</span> <span class=\"nx\">action</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<ul>\n  <li>Must not mutate its input ‘state’ argument; We are not going to mutate state ever! However, When we work on a reducer that is returning an array or an object, we might want to change an element/property in the returned array/object. In that case, we can use the syntax below which also makes sure we are not mutating any state argument, because it creates a new array or object:\n<img src=\"/assets/img/posts/2018-12-28-no-mutate.png\" alt=\"mutate\" /></li>\n</ul>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux02 - Async with Redux Thunk",
        "category" : "",
        "tags"     : " react, redux, react-redux, redux-thunk",
        "url"      : "/udemy-react/2018/12/27/async-redux.html",
        "date"     : "December 27, 2018",
        "excerpt"  : "<p>A middleware makes network requests from the Redux side of app. It is a plain JavaScript function that is called with every single action we dispatch. Especially it is required when we work with an asynchronous Action Creator, because it has th...",
        "content"  : "<p>A middleware makes network requests from the Redux side of app. It is a plain JavaScript function that is called with every single action we dispatch. Especially it is required when we work with an asynchronous Action Creator, because it has the ability to STOP, MODIFY or otherwise mess around with actions. Redux Thunk is one of middelwares in the world of Redux that can work with Action Creators!</p>\n\n<h3 id=\"general-data-loading-with-redux\">General Data Loading with Redux</h3>\n<ol>\n  <li>Component gets rendered onto the screen</li>\n  <li>Component’s ‘componentDidMount’ lifecycle method get called</li>\n  <li>We call Action Creator automatically from ‘componentDidMount’</li>\n  <li>Action Creator runs code to make an API request</li>\n  <li>API responds with data</li>\n  <li>Action creator returns an ‘action’ with the fetched data on the ‘payload’ property; <em>this is where Redux-Thunk comes into play</em></li>\n  <li>Specially configured reducers sees the action, returns the data of the ‘payload’</li>\n  <li>Because we generated some new state object, redux/react-redux cause our React app to be rerendered; we get fetched data into a component by generating new state in our redux store, then getting that into our component through mapStateToProps</li>\n</ol>\n\n<p>In relation to the process above, if we make Action Creator like below, there will be an error as the reason in the comments:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// /src/actions/index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">jsonPlaceholder</span> <span class=\"k\">from</span> <span class=\"s1\">'../apis/jsonPlaceholder'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// There is an error in this component, because this Action Creator is not returning a plain JavaScript object, because we have the async await syntax.</span>\n<span class=\"c1\">// However, we cannot just simply skip this async await syntax.</span>\n<span class=\"c1\">// This is because by the time we finally get a response from the API,</span>\n<span class=\"c1\">// our action has long since been processed by our reducers that have already ran.</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">fetchPosts</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">jsonPlaceholder</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/posts'</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'FETCH_POSTS'</span><span class=\"p\">,</span>\n        <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span>\n    <span class=\"p\">};</span>\n<span class=\"p\">};</span></code></pre></figure>\n\n<h3 id=\"rules-with-redux-thunk\">Rules with Redux Thunk</h3>\n<p>In the normal rules of Action Creator in Redux, “it must return action objects”. However, with Redux Thunk, Action Creator can return action objects or functions. In the case that a function is returned, Redux Thunk is going to automatically call the function with dispatch and getState function. Once we get a response eventually, we can manually dispatch an action with the response at some point in time in the future.</p>\n\n<p>The code above can be fixed like this with React Thunk:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// /src/actions/index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">jsonPlaceholder</span> <span class=\"k\">from</span> <span class=\"s1\">'../apis/jsonPlaceholder'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">fetchPosts</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span>\n    <span class=\"k\">async</span> <span class=\"nx\">dispatch</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">jsonPlaceholder</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/posts'</span><span class=\"p\">);</span>\n\n        <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"s1\">'FETCH_POSTS'</span><span class=\"p\">,</span> <span class=\"na\">payload</span><span class=\"p\">:</span> <span class=\"nx\">response</span> <span class=\"p\">})</span>\n    <span class=\"p\">};</span></code></pre></figure>\n\n<h3 id=\"app-repo\">App Repo</h3>\n<p><a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/14.blog\">Here</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React08 - Navigating with React Router",
        "category" : "",
        "tags"     : " react, react-router",
        "url"      : "/udemy-react/2018/12/26/react-router.html",
        "date"     : "December 26, 2018",
        "excerpt"  : "<p>Ract Router can let a user navigate to another page with different URLs in our app. However, unlike the traditional way of handling this, we should not use the traditional anchor tag to link somewhere. Because it will return a new HTML document...",
        "content"  : "<p>Ract Router can let a user navigate to another page with different URLs in our app. However, unlike the traditional way of handling this, we should not use the traditional anchor tag to link somewhere. Because it will return a new HTML document so we will lose all data in memory and access to any API. We’d better use Link tag in this case as below code to keep a browser from dumping all our react and JavaScript data.</p>\n\n<h3 id=\"command-to-install-navigation-for-dom-based-apps\">Command to install navigation for dom-based apps</h3>\n<p>npm install –save react-router-dom</p>\n\n<h3 id=\"code-example\">Code Example</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserRouter</span><span class=\"p\">,</span> <span class=\"nx\">Route</span><span class=\"p\">,</span> <span class=\"nx\">Link</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-router-dom'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">PageOne</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n            <span class=\"nx\">PageOne</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Link</span> <span class=\"nx\">to</span><span class=\"o\">=</span><span class=\"s2\">\"/pagetwo\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Navigate</span> <span class=\"nx\">to</span> <span class=\"nx\">Page</span> <span class=\"nx\">Two</span><span class=\"o\">&lt;</span><span class=\"sr\">/Link</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">PageTwo</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n            <span class=\"nx\">PageTwo</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Link</span> <span class=\"nx\">to</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Navigate</span> <span class=\"nx\">to</span> <span class=\"nx\">Page</span> <span class=\"nx\">One</span><span class=\"o\">&lt;</span><span class=\"sr\">/Link</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">BrowserRouter</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">exact</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">PageOne</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                    <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/pagetwo\"</span> <span class=\"nx\">exact</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">PageTwo</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/BrowserRouter</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>However, When we do programming, it would be required to forcibly change or navigate a user to a different page responding to some event. However, when we use a browser router from react-router, the browser router creates a history object which not only watches and keeps track of the address bar, but also is able to change the address bar. To manipulate the history object by ourselves to navigate a user forcibly, we can create a customized history object to control it by ourselves rather than allowing react-router to do so.</p>\n\n<h3 id=\"creating-a-broswer-history-object\">Creating a broswer history object</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">createHistory</span> <span class=\"k\">from</span> <span class=\"s1\">'history/createBrowserHistory'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">createHistory</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// This is it!</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// App.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Route</span><span class=\"p\">,</span> <span class=\"nx\">Switch</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-router-dom'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">StreamCreate</span> <span class=\"k\">from</span> <span class=\"s1\">'../components/streams/StreamCreate'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">StreamList</span> <span class=\"k\">from</span> <span class=\"s1\">'../components/streams/StreamList'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Header</span> <span class=\"k\">from</span> <span class=\"s1\">'./Header'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">history</span> <span class=\"k\">from</span> <span class=\"s1\">'../history'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui container\"</span><span class=\"o\">&gt;</span>\n            <span class=\"c1\">// Use Router than BrowserRouter!</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Router</span> <span class=\"nx\">history</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">history</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Header</span> <span class=\"o\">/&gt;</span>\n                <span class=\"c1\">// This switch is to show only one of these given routes</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Switch</span><span class=\"o\">&gt;</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">exact</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">StreamList</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                    <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/streams/new\"</span> <span class=\"nx\">exact</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">StreamCreate</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/Switch</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/Router</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Then, now we can use this syntax to navigate a user programmatically!</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">);</span></code></pre></figure>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux01 - React with Redux",
        "category" : "",
        "tags"     : " react, redux, react-redux",
        "url"      : "/udemy-react/2018/12/26/react-redux.html",
        "date"     : "December 26, 2018",
        "excerpt"  : "<p>The Redux library is not only designed to work with React. Thus, we have to note that after installing React and Redux, and we need a third party library, React-Redux, which can let us use integrate React with Redux.</p>\n\n<h3 id=\"command-to-ins...",
        "content"  : "<p>The Redux library is not only designed to work with React. Thus, we have to note that after installing React and Redux, and we need a third party library, React-Redux, which can let us use integrate React with Redux.</p>\n\n<h3 id=\"command-to-install-redux-and-redux-react-into-react-project\">Command to install Redux and Redux-React into React project</h3>\n<p>npm install –save redux react-redux</p>\n\n<h3 id=\"how-react-redux-works\">How React-Redux works?</h3>\n<p><img src=\"/assets/img/posts/2018-12-26-react-redux-structure.png\" alt=\"structure\" /></p>\n<ul>\n  <li>To use react-redux, we need to create two new components: Provider and Connect</li>\n  <li>The Provider is rendered at the very top of app and has eternal reference to Redux store. The term Provider essentially means it is providing information to all of the different components inside of our app.</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Provider</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-redux'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">createStore</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'redux'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">App</span> <span class=\"k\">from</span> <span class=\"s1\">'./components/App'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">reducers</span> <span class=\"k\">from</span> <span class=\"s1\">'./reducers'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Create an instance of provider and wrap our app component with it</span>\n<span class=\"c1\">// The store prop is going to be a result of calling create store and passed in our reducers.</span>\n<span class=\"c1\">// So in a typical redux application, we don't have to go directly to the store. The provider will take care of it. </span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">Provider</span> <span class=\"nx\">store</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">createStore</span><span class=\"p\">(</span><span class=\"nx\">reducers</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"sr\">/Provider&gt;</span><span class=\"err\">,\n</span>    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#root'</span><span class=\"p\">));</span></code></pre></figure>\n\n<ul>\n  <li>The connect function is special because it can communicate with the Provider at the very top of our hierarchy. It communicates with the Provider not through the props system but through a completely different system of communication(the context system). So the connect function can get data from the Provider and pass it as a prop to components that need to interact with the redux store. The connect function can be used not only to get data out of our store but also to get action creators correctly into our components to change data in the Redux store.</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// SongList.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">connect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-redux'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">selectSong</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../actions'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">SongList</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">renderList</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">songs</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span> <span class=\"p\">(</span><span class=\"nx\">song</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"item\"</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">song</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"right floated content\"</span><span class=\"o\">&gt;</span>\n                        <span class=\"o\">&lt;</span><span class=\"nx\">button</span> \n                            <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui button primary\"</span>\n                            <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">selectSong</span><span class=\"p\">(</span><span class=\"nx\">song</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span>\n                            <span class=\"nx\">Select</span>\n                        <span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>                    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"content\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">song</span><span class=\"p\">.</span><span class=\"nx\">title</span> <span class=\"p\">}</span> \n                    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui divided list\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderList</span><span class=\"p\">()}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div&gt;</span><span class=\"err\">;\n</span>    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Take our state object inside of our redux store, and it will show up as props inside of our component.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">mapStateToProps</span> <span class=\"o\">=</span> <span class=\"nx\">state</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">songs</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">songs</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// We should not call Action Creator inside of our component.</span>\n<span class=\"c1\">// This connect function will call automatically the Action Creator that we made,</span>\n<span class=\"c1\">// and automatically take the action that gets returned as calling the dispatch function of Redux for us.</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">mapStateToProps</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">selectSong</span> <span class=\"p\">})(</span><span class=\"nx\">SongList</span><span class=\"p\">);</span></code></pre></figure>\n\n<h3 id=\"repo-for-the-full-example-codes\">Repo for the full example codes</h3>\n<p><a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/13.songs\">Here</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React-Redux00 - Intro to Redux",
        "category" : "",
        "tags"     : " redux",
        "url"      : "/udemy-react/2018/12/25/redux-intro.html",
        "date"     : "December 25, 2018",
        "excerpt"  : "<p>Redux is a state management library. The goal of React is rendering content and handling user interaction rather than handling data. For handling data, we can make Redux keep/handle states of our app in/from a single store. By doing so, we can ...",
        "content"  : "<p>Redux is a state management library. The goal of React is rendering content and handling user interaction rather than handling data. For handling data, we can make Redux keep/handle states of our app in/from a single store. By doing so, we can create an advanced application easier with Redux than using React alone.</p>\n\n<h3 id=\"redux-cycle\">Redux Cycle</h3>\n<p>Action Creator 🡒 Action 🡒 dispatch 🡒 Reducers 🡒 State</p>\n\n<h4 id=\"action-creator\">Action Creator</h4>\n<p>The action creator is a function that creates or returns a plain JavaScript object. We call it to change state of our app.</p>\n\n<h4 id=\"action\">Action</h4>\n<p>The action is the plain JavaScript object produced by action creator and has a type(of change we want to make) and payload(context around the change) property. The purpose of an action is to describe some changes that we want to make to the data inside of our app.</p>\n\n<h4 id=\"dispatch\">dispatch</h4>\n<p>The dispatch function is going to take in action; making copies of the object and forward them to places inside of our app.</p>\n\n<h4 id=\"reducer\">Reducer</h4>\n<p>The reducer is a function taking in an action. It is going to process an action and then make some changes to data(state) and return it, so that it can be centralized in other location.</p>\n\n<h4 id=\"state\">State</h4>\n<p>A state property is a central repository of all information that has been created by reducers. It waits until we need to update it again.</p>\n\n<h3 id=\"example-code\">Example code</h3>\n<p><a href=\"https://codepen.io/nh0627/pen/VqboVy?editors=0010\">https://codepen.io/nh0627/pen/VqboVy?editors=0010</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React App Practice01 - Youtube Browser APP",
        "category" : "",
        "tags"     : " react, app-practice",
        "url"      : "/udemy-react/2018/12/24/youtube-app.html",
        "date"     : "December 24, 2018",
        "excerpt"  : "<h3 id=\"features\">Features</h3>\n<ul>\n  <li>Search for a list of videos matching a search term with Youtube Public API</li>\n  <li>When a user click on a video, it will be appeared on the screen with a title and a description</li>\n</ul>\n\n<h3 id=\"con...",
        "content"  : "<h3 id=\"features\">Features</h3>\n<ul>\n  <li>Search for a list of videos matching a search term with Youtube Public API</li>\n  <li>When a user click on a video, it will be appeared on the screen with a title and a description</li>\n</ul>\n\n<h3 id=\"concept\">Concept</h3>\n<p><img src=\"/assets/img/posts/2018-12-24-concept.png\" alt=\"concept\" /></p>\n\n<h3 id=\"output\">Output</h3>\n<p><img src=\"/assets/img/posts/2018-12-24-result.png\" alt=\"result\" /></p>\n\n<h3 id=\"repository\">Repository</h3>\n<p><a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/11.videos\">Here</a></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React07 - Making a Simple Picture App with Ref(2)",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/23/picture-app-grid.html",
        "date"     : "December 23, 2018",
        "excerpt"  : "<p>In the previous post, I made an app listing pictures according to user’s keyword input. However, in this post I would like to make each picture as a grid in order to let the app have a better display of images.</p>\n\n<h3 id=\"before\">Before</h3>\n...",
        "content"  : "<p>In the previous post, I made an app listing pictures according to user’s keyword input. However, in this post I would like to make each picture as a grid in order to let the app have a better display of images.</p>\n\n<h3 id=\"before\">Before</h3>\n<p><img src=\"/assets/img/posts/2018-12-22-picture-1.png\" alt=\"picture\" /></p>\n\n<h3 id=\"now\">Now</h3>\n<p><img src=\"/assets/img/posts/2018-12-23-picture-2.png\" alt=\"picture\" /></p>\n\n<p>To do so, ImageCard component needs to be made to put each picture into grid in the order below:</p>\n<ol>\n  <li>Let the ImageCard render itself and its image.</li>\n  <li>Reach into the DOM and figure out the height of the image. <em>We need React refs here!</em></li>\n  <li>Set the image height on state to get the component to rerender.</li>\n  <li>When rerendering, assign a ‘grid-row-end’ to make sure the image takes up the appropriate space.</li>\n</ol>\n\n<h3 id=\"react-refs\">React Refs</h3>\n<ul>\n  <li>Gives direct access to a single DOM element rendered by a component</li>\n  <li>We create refs in the constructor, assign them to instance vairables, then pass to a particular JSX element as props</li>\n</ul>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">ImageCard</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createRef</span><span class=\"p\">();</span> <span class=\"c1\">// Create a React ref</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">);</span> <span class=\"c1\">// We can print out each image's height</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">description</span><span class=\"p\">,</span> <span class=\"nx\">urls</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">img</span>\n                    <span class=\"p\">{</span><span class=\"cm\">/*Pass a new prop ref to wire up the ref (JSX tag)*/</span><span class=\"p\">}</span>\n                    <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span><span class=\"p\">}</span>\n                    <span class=\"nx\">alt</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">description</span><span class=\"p\">}</span>\n                    <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">urls</span><span class=\"p\">.</span><span class=\"nx\">regular</span><span class=\"p\">}</span>\n                <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">ImageCard</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>By the way, if we execute the code above, we can see the image height is 0 on Chrome console. This is because when we console log out the height of the image, there is no image downloaded yet. It is too early to get the image height value at the time, because there is no image loaded yet. To fix this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">ImageCard</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">spans</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">};</span> <span class=\"c1\">// Initialize a state</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createRef</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// It will listen for the event load any time that an image loaded, and then call setSpans() </span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">'load'</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setSpans</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">setSpans</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Get the correct height of each image and set it into the state</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span><span class=\"p\">.</span><span class=\"nx\">current</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">spans</span> <span class=\"o\">=</span> <span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">ceil</span><span class=\"p\">(</span><span class=\"nx\">height</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"nx\">spans</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">description</span><span class=\"p\">,</span> <span class=\"nx\">urls</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"na\">gridRowEnd</span><span class=\"p\">:</span><span class=\"s2\">`span </span><span class=\"p\">${</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">spans</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">img</span>\n                    <span class=\"nx\">ref</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">imageRef</span><span class=\"p\">}</span>\n                    <span class=\"nx\">alt</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">description</span><span class=\"p\">}</span>\n                    <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">urls</span><span class=\"p\">.</span><span class=\"nx\">regular</span><span class=\"p\">}</span>\n                <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">ImageCard</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>The final code is <a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/07.pics\">here</a>.</p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React06 - Making a Simple Picture App with React Input Form and Listing data from API(1)",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/22/picture-app-list.html",
        "date"     : "December 22, 2018",
        "excerpt"  : "<p>Event handlers in React work simliarly to normal HTML DOM. However, there are certain differences that we have to be aware of using React as below. To practice this points, I have implemented an application listing pictures according to user’s ...",
        "content"  : "<p>Event handlers in React work simliarly to normal HTML DOM. However, there are certain differences that we have to be aware of using React as below. To practice this points, I have implemented an application listing pictures according to user’s keyword to deal with how to use Input form and make Ajax call to API in React.</p>\n\n<h3 id=\"returning-false\">Returning false</h3>\n<p>To prevent default behavior, we cannot return ‘false’ like a normal HTML code. Rather, we have to call preventDefault:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// HTML</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onclick</span><span class=\"o\">=</span><span class=\"s2\">\"onExampleCilck(); return false\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Submit</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>\n<span class=\"c1\">// React</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onExampleCilck</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h3 id=\"controlled-components\">Controlled components</h3>\n<p>We’d better store data in mutable React state than the DOM rather than letting HTML form keep data as it does natually. If we store data in React state, React component can do both render a form and control the form’s data from user input; it is easiler way to control data in React! This is called “controlled component” that data/value of an input form element is controlled by React like this:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"kd\">class</span> <span class=\"nx\">SearchBar</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">term</span><span class=\"p\">:</span> <span class=\"s1\">''</span> <span class=\"p\">};</span>\n\n\t<span class=\"nx\">onFormSubmit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n\t<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onSubmit</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">term</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui segment\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">form</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onFormSubmit</span><span class=\"p\">}</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui form\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"field\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">label</span><span class=\"o\">&gt;</span><span class=\"nx\">Image</span> <span class=\"na\">search</span><span class=\"p\">:</span>\n\t\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">input</span> \n\t\t\t\t\t\t\t<span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"text\"</span> \n\t\t\t\t\t\t\t<span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">term</span><span class=\"p\">}</span>\n\t\t\t\t\t\t\t<span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">term</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">})</span> <span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t\t\t\t\t<span class=\"p\">{</span><span class=\"cm\">/* Controlled component: React state will control submitted value */</span><span class=\"p\">}</span>\n\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/label</span><span class=\"err\">&gt;\n</span>\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/form</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<h3 id=\"axios-vs-fetch-the-axios-is-recommended-to-make-ajax-call\">axios VS. fetch: the axios is recommended to make Ajax call</h3>\n<ul>\n  <li>The axios is a standalone third party package that can be installed into a React project</li>\n  <li>The fetch function is a singular function that is built into almost all modern browsers, but far more basic to use</li>\n  <li>How to install axios: npm install –save axios</li>\n</ul>\n\n<h3 id=\"the-app-features-repo\">The app features (<a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/07.pics\">repo</a>)</h3>\n<ol>\n  <li>Get a search term from a user</li>\n  <li>Use the search term to make a request to an outside API and fetch data</li>\n  <li>Take the fetches images and show them on the screen in a list</li>\n</ol>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"cm\">/* This app contains two components: SearchBar and ImageList */</span>\n\n<span class=\"c1\">// App.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">unsplash</span> <span class=\"k\">from</span> <span class=\"s1\">'../api/unsplash'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">SearchBar</span> <span class=\"k\">from</span> <span class=\"s1\">'./SearchBar'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ImageList</span> <span class=\"k\">from</span> <span class=\"s1\">'./ImageList'</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/* This app contains two components: SearchBar and ImageList */</span>\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span><span class=\"p\">{</span>\n\n    <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">images</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">};</span>\n\n    <span class=\"c1\">// In ES2015, aero functions automatically bind the value of \"this\" for all code inside the function.</span>\n    <span class=\"c1\">// This request is an asynchronous request, it will take some amount of time to get a result from API.</span>\n    <span class=\"nx\">onSearchSubmit</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">term</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// When we put async/await keyword, it will wait till getting a response from API and we can freely work with it later.</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">unsplash</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/search/photos'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n            <span class=\"na\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">query</span><span class=\"p\">:</span> <span class=\"nx\">term</span> <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">images</span><span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">results</span> <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui container\"</span> <span class=\"nx\">style</span><span class=\"o\">=&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">SearchBar</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onSearchSubmit</span><span class=\"p\">}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>                <span class=\"o\">&lt;</span><span class=\"nx\">ImageList</span> <span class=\"nx\">images</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">images</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// unsplash.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"s1\">'axios'</span><span class=\"p\">;</span>\n<span class=\"c1\">// This create method is going to create a pre-customized instance of the axios.</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">({</span>\n\t<span class=\"na\">baseURL</span><span class=\"p\">:</span> <span class=\"s1\">'https://api.unsplash.com'</span><span class=\"p\">,</span>\n\t<span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n\t\t<span class=\"na\">Authorization</span><span class=\"p\">:</span> \n\t\t<span class=\"s1\">'Client-ID ID'</span> <span class=\"c1\">// Put API access key</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">});</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// SearchBar.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"kd\">class</span> <span class=\"nx\">SearchBar</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">term</span><span class=\"p\">:</span> <span class=\"s1\">''</span> <span class=\"p\">};</span>\n\t<span class=\"c1\">// In ES2015, aero functions automatically bind the value of \"this\" for all code inside the function. if not, \"this\" will be undefined</span>\n\t<span class=\"c1\">// keep the browser from trying to submit the form automatically and in the process refreshing the page</span>\n\t<span class=\"nx\">onFormSubmit</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\t<span class=\"c1\">// Passing submitted data to the parent App component</span>\n\t<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">onSubmit</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">term</span><span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui segment\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">form</span> <span class=\"nx\">onSubmit</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">onFormSubmit</span><span class=\"p\">}</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui form\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"field\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">label</span><span class=\"o\">&gt;</span><span class=\"nx\">Image</span> <span class=\"na\">search</span><span class=\"p\">:</span>\n\t\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">input</span> \n\t\t\t\t\t\t\t<span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">\"text\"</span> \n\t\t\t\t\t\t\t<span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">term</span><span class=\"p\">}</span>\n\t\t\t\t\t\t\t<span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">term</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">})</span> <span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t\t\t\t\t<span class=\"p\">{</span><span class=\"cm\">/* Controlled component: React state will control submitted value */</span><span class=\"p\">}</span>\n\t\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/label</span><span class=\"err\">&gt;\n</span>\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/form</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">SearchBar</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// ImageList.js</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ImageList</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"c1\">// Push props.images into an array and display it into div</span>\n\t<span class=\"kd\">const</span> <span class=\"nx\">images</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">images</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(({</span> <span class=\"nx\">description</span><span class=\"p\">,</span> <span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">urls</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t\t<span class=\"c1\">// Listing images with map() function</span>\n\t\t<span class=\"c1\">// Let each element has a unique key(id property) in a list also to identify elements.</span>\n\t\t<span class=\"k\">return</span><span class=\"p\">(</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">id</span><span class=\"p\">}</span> <span class=\"nx\">alt</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">description</span><span class=\"p\">}</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">urls</span><span class=\"p\">.</span><span class=\"nx\">regular</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"p\">);</span>\n\t\t<span class=\"p\">});</span>\n\t\t<span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">images</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">};</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">ImageList</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Output:\n<img src=\"/assets/img/posts/2018-12-22-picture-1.png\" alt=\"picture\" /></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React05 - Component Lifecycle",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/21/lifecycle.html",
        "date"     : "December 21, 2018",
        "excerpt"  : "<p>Component lifecycle method is a function that can be optionally defined and used inside of class-based components if we want to use it at a distinct time during the component lifecycle.</p>\n\n<h3 id=\"component-lifecycle-methods\">Component lifecy...",
        "content"  : "<p>Component lifecycle method is a function that can be optionally defined and used inside of class-based components if we want to use it at a distinct time during the component lifecycle.</p>\n\n<h3 id=\"component-lifecycle-methods\">Component lifecycle methods</h3>\n<ul>\n  <li>componentDidMount(): when a component rendered to DOM for the first time; it is recommended to initialize data than constructor</li>\n  <li>componentDidUpdate(): anytime a component gets updated</li>\n  <li>componentWillUnmount() when a component removed from DOM.</li>\n</ul>\n\n<h4 id=\"application-with-class-component-state-and-lifecycle-detecting-a-users-geolocation-and-determining-if-the-users-season-is-summer-or-winter-repo\">Application with class-component, state and lifecycle detecting a user’s geolocation and determining if the user’s season is summer or winter <a href=\"https://github.com/nh0627/udemy-react-redux/tree/master/04.seasons\">Repo</a></h4>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// index.js</span>\n<span class=\"cm\">/* It will handle initializing state on user's geolocation, \ncomponent life cycle, and render a error/season/loader message upon condition below. */</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">SeasonDisplay</span> <span class=\"k\">from</span> <span class=\"s1\">'./SeasonDisplay'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Loader</span> <span class=\"k\">from</span> <span class=\"s1\">'./loader'</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// Any constructor is not required!</span>\n    <span class=\"c1\">// Babel will put this line into Constructor anyways</span>\n    <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">lat</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"na\">errorMessage</span><span class=\"p\">:</span> <span class=\"s1\">''</span> <span class=\"p\">};</span> \n\n    <span class=\"c1\">// Lifecycle method</span>\n    <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'My component was rendered to the screen'</span><span class=\"p\">);</span>\n        \n        <span class=\"c1\">// Initialize data here(users physical location)</span>\n        <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">navigator</span><span class=\"p\">.</span><span class=\"nx\">geolocation</span><span class=\"p\">.</span><span class=\"nx\">getCurrentPosition</span><span class=\"p\">(</span>\n            <span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">lat</span><span class=\"p\">:</span> <span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">coords</span><span class=\"p\">.</span><span class=\"nx\">latitude</span> <span class=\"p\">}),</span> \n            <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">errorMessage</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">})</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Lifecycle method</span>\n    <span class=\"nx\">componentDidUpdate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'My component was just updated - it re-rendered!'</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span> <span class=\"nb\">Error</span> <span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"p\">}</span> <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">SeasonDisplay</span> <span class=\"kd\">let</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span><span class=\"p\">}</span> <span class=\"sr\">/&gt; /</span><span class=\"o\">/</span> <span class=\"nx\">Pass</span> <span class=\"nx\">state</span> <span class=\"k\">as</span> <span class=\"nx\">props</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">Loader</span> <span class=\"nx\">message</span><span class=\"o\">=</span><span class=\"s2\">\"Please accept location request!\"</span> <span class=\"o\">/&gt;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span>\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#root'</span><span class=\"p\">)</span>\n<span class=\"p\">);</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// SeasonDisplay.js</span>\n<span class=\"c1\">// SeasonDisplay component shows different text/icons based on props</span>\n\n<span class=\"k\">import</span> <span class=\"s1\">'./SeasonDisplay.css'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">seasonConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">summer</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"s1\">'Lets hit the beach!'</span><span class=\"p\">,</span>\n        <span class=\"na\">iconName</span><span class=\"p\">:</span> <span class=\"s1\">'sun'</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">winter</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"s1\">'Burr, it is chilly'</span><span class=\"p\">,</span>\n        <span class=\"na\">iconName</span><span class=\"p\">:</span> <span class=\"s1\">'snowflake'</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Determine season responding to user's latitude</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getSeason</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">lat</span><span class=\"p\">,</span> <span class=\"nx\">month</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">month</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">month</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n       <span class=\"k\">return</span> <span class=\"nx\">lat</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"p\">?</span> <span class=\"s1\">'summer'</span> <span class=\"p\">:</span> <span class=\"s1\">'winter'</span><span class=\"p\">;</span> \n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n       <span class=\"k\">return</span> <span class=\"nx\">lat</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"p\">?</span> <span class=\"s1\">'summer'</span> <span class=\"p\">:</span> <span class=\"s1\">'winter'</span><span class=\"p\">;</span> \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">SeasonDisplay</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">season</span> <span class=\"o\">=</span> <span class=\"nx\">getSeason</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">lat</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMonth</span><span class=\"p\">());</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span><span class=\"nx\">text</span><span class=\"p\">,</span> <span class=\"nx\">iconName</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">seasonConfig</span><span class=\"p\">[</span><span class=\"nx\">season</span><span class=\"p\">];</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`season-display </span><span class=\"p\">${</span><span class=\"nx\">season</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">i</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">iconName</span><span class=\"p\">}</span><span class=\"s2\"> icon-left icon massive`</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">text</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">i</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">iconName</span><span class=\"p\">}</span><span class=\"s2\"> icon-right icon massive`</span><span class=\"p\">}</span> <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">SeasonDisplay</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"nx\">SeasonDisplay</span><span class=\"p\">.</span><span class=\"nx\">css</span>\n<span class=\"p\">.</span><span class=\"nx\">icon</span><span class=\"o\">-</span><span class=\"nx\">left</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nx\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">icon</span><span class=\"o\">-</span><span class=\"nx\">right</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nx\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"nx\">px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">season</span><span class=\"o\">-</span><span class=\"nx\">display</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nx\">flex</span><span class=\"p\">;</span>\n    <span class=\"nx\">justify</span><span class=\"o\">-</span><span class=\"nx\">content</span><span class=\"p\">:</span> <span class=\"nx\">center</span><span class=\"p\">;</span>\n    <span class=\"nx\">align</span><span class=\"o\">-</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nx\">center</span><span class=\"p\">;</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"nx\">vh</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">season</span><span class=\"o\">-</span><span class=\"nx\">display</span><span class=\"p\">.</span><span class=\"nx\">winter</span> <span class=\"nx\">i</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nx\">blue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">season</span><span class=\"o\">-</span><span class=\"nx\">display</span><span class=\"p\">.</span><span class=\"nx\">summer</span> <span class=\"nx\">i</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nx\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">winter</span> <span class=\"p\">{</span>\n    <span class=\"nx\">background</span><span class=\"o\">-</span><span class=\"nx\">color</span><span class=\"p\">:</span> <span class=\"nx\">aliceblue</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nx\">summer</span> <span class=\"p\">{</span>\n    <span class=\"nx\">background</span><span class=\"o\">-</span><span class=\"nx\">color</span><span class=\"p\">:</span> <span class=\"nx\">orange</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// loader.js </span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Loader</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui active dimmer\"</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui big text loader\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Set default value for props</span>\n<span class=\"nx\">Loader</span><span class=\"p\">.</span><span class=\"nx\">defaultProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'Loading...'</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Loader</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Output:\n<img src=\"/assets/img/posts/2018-12-21-season-1.png\" alt=\"season\" />\n<img src=\"/assets/img/posts/2018-12-21-season-2.png\" alt=\"season\" /></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React04 - Class-based Components, State and Component Lifecycle",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/20/class-component-state.html",
        "date"     : "December 20, 2018",
        "excerpt"  : "<p>A component can be functional or a class-based. Functional components are good enough to display simple content, but class components can be good for more than a simple feature with any complex logic. There is a concept of “state” in React also...",
        "content"  : "<p>A component can be functional or a class-based. Functional components are good enough to display simple content, but class components can be good for more than a simple feature with any complex logic. There is a concept of “state” in React also; State lets components to update their output data as responding immediately to a user’s action(asynchronously).</p>\n\n<h3 id=\"rules-of-class-components\">Rules of Class Components</h3>\n<ul>\n  <li>Must be a JavaScript class</li>\n  <li>Must extend(subclass) React.Component</li>\n  <li>Must define a ‘render’ method that returns some amount of JSX</li>\n</ul>\n\n<h3 id=\"rules-of-state\">Rules of State</h3>\n<ul>\n  <li>Only usable with class-components</li>\n  <li>‘State’ is a JS object that contains data related to a single component</li>\n  <li>Updating ‘state’ on a component causes the component to <em>(almost) instatntly re-rendered</em></li>\n  <li>State must be initialized when a component is first created (a constructor can be helpful)</li>\n  <li>State can <em>only</em> be updated using the function ‘setState’</li>\n</ul>\n\n<h3 id=\"detecting-users-geolocation-with-react-state\">Detecting user’s geolocation with React State</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/*\nTimeline of how this app works\n\t1. JS file loaded by browser\n\t2. Instance of App component is created\n\t3. App components 'constructor' function gets called\n\t4. State object is created and assigned to the 'this.state' property\n\t5. We call geolocation service\n\t6. React calls the components render method\n\t7. App returns JSX, gets rendered to page as HTML\n\t... after a while\n\t8. We get result of geolocation!!!\n\t9. We update our state object with a call to 'this.setState'\n\t10. React sees that we updated the state of a component\n\t11. React calls our 'render' method a second time\n\t12. Render method returns some (updated) JSX\n*/</span>\n\n<span class=\"c1\">// App component has code to figure out user's location and month</span>\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"kd\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n\t<span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span> <span class=\"c1\">// It must to be called!!!</span>\n\t\t<span class=\"c1\">// Initialize state object with sensible value, but THIS IS ONLY TIME we do direct assignment to this.state</span>\n\t\t<span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">lat</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"na\">errorMessage</span><span class=\"p\">:</span> <span class=\"s1\">''</span> <span class=\"p\">};</span> \n\t\t<span class=\"c1\">// Get users physical location</span>\n\t\t<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">navigator</span><span class=\"p\">.</span><span class=\"nx\">geolocation</span><span class=\"p\">.</span><span class=\"nx\">getCurrentPosition</span><span class=\"p\">(</span>\n\t\t<span class=\"c1\">// To update state object, setState must be called! *rather than \"this.state.lat = value\")</span>\n\t\t<span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"na\">lat</span><span class=\"p\">:</span> <span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">coords</span><span class=\"p\">.</span><span class=\"nx\">latitude</span> <span class=\"p\">}),</span> \n\t\t<span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"na\">errorMessage</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">})</span>\n\t\t<span class=\"p\">);</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"c1\">// React says we have to define render!!</span>\n\t<span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span> <span class=\"nb\">Error</span> <span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"p\">}</span> <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">errorMessage</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Latitude</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">lat</span> <span class=\"p\">}</span> <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"p\">}</span>\n\t\t<span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Loading</span><span class=\"o\">!&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span>\n\t<span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span>\n\t<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#root'</span><span class=\"p\">)</span>\n<span class=\"p\">);</span></code></pre></figure>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React03 - Add More Components inside a Component",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/19/component-prop2.html",
        "date"     : "December 19, 2018",
        "excerpt"  : "<p>A React app usually has one App component as the root/top one. Then it can contain children components that we can reuse as many as we want into a parent component and configure/customize them with props as below.</p>\n\n<h3 id=\"add-components-ov...",
        "content"  : "<p>A React app usually has one App component as the root/top one. Then it can contain children components that we can reuse as many as we want into a parent component and configure/customize them with props as below.</p>\n\n<h3 id=\"add-components-over-components\">Add components over components</h3>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"s1\">'faker'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">CommentDetail</span> <span class=\"k\">from</span> <span class=\"s1\">'./CommentDetail'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ApprovalCard</span> <span class=\"k\">from</span> <span class=\"s1\">'./ApprovalCard'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui container comments\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">ApprovalCard</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"p\">{</span><span class=\"cm\">/* A component can be reused without any child component */</span><span class=\"p\">}</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">h4</span><span class=\"o\">&gt;</span><span class=\"nx\">Warning</span><span class=\"o\">!&lt;</span><span class=\"sr\">/h4</span><span class=\"err\">&gt;\n</span>\t\t\t\t<span class=\"nx\">Are</span> <span class=\"nx\">you</span> <span class=\"nx\">sure</span> <span class=\"nx\">you</span> <span class=\"nx\">want</span> <span class=\"nx\">to</span> <span class=\"k\">do</span> <span class=\"k\">this</span><span class=\"p\">?</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/ApprovalCard</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">ApprovalCard</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t\t<span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Sam\"</span> \n\t\t\t\t<span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 4:30 PM\"</span> \n\t\t\t\t<span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"Nice to know!\"</span> \n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/ApprovalCard</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">ApprovalCard</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t\t<span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Alex\"</span> \n\t\t\t\t<span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 5:30 PM\"</span> \n\t\t\t\t<span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"I like what you wrote there.\"</span>\n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/ApprovalCard</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">ApprovalCard</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"err\">     </span><span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t<span class=\"err\">     </span><span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Jane\"</span> \n\t\t\t<span class=\"err\">     </span><span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 6:30 PM\"</span> \n\t\t\t<span class=\"err\">     </span><span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"Nice blog post!\"</span>\n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/ApprovalCard</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#root'</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// CommentDetail.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"s1\">'faker'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentDetail</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"comment\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"avatar\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">alt</span><span class=\"o\">=</span><span class=\"s2\">\"avatar\"</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">avatar</span> <span class=\"p\">}</span>\n\t\t\t\t<span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"content\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"author\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">author</span> <span class=\"p\">}</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"metadata\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"date\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">timeAgo</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"text\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">CommentDetail</span><span class=\"p\">;</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// ApprovalCard.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ApprovalCard</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui card\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"p\">{</span><span class=\"cm\">/* Load the child component, CommentDetail like below! */</span><span class=\"p\">}</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"content\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"extra content\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui two buttons\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui basic green button\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Approve</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui basic red button\"</span><span class=\"o\">&gt;</span><span class=\"nx\">Reject</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">);</span>\n<span class=\"p\">};</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">ApprovalCard</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Output:\n<img src=\"/assets/img/posts/2018-12-19-comments.png\" alt=\"comments\" /></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React02 - Communicating with Props between Components",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/18/component-prop.html",
        "date"     : "December 18, 2018",
        "excerpt"  : "<p>React component can split the whole UI of an application into separated and independent pieces, and these pieces can communicate with props(properties).</p>\n\n<h3 id=\"react-component\">React Component</h3>\n<ul>\n  <li>Component Nesting: components...",
        "content"  : "<p>React component can split the whole UI of an application into separated and independent pieces, and these pieces can communicate with props(properties).</p>\n\n<h3 id=\"react-component\">React Component</h3>\n<ul>\n  <li>Component Nesting: components can be nested in a parent component</li>\n  <li>Component Reusability: components can be re-used over application</li>\n  <li>Component Configuration: components should be able to be configured</li>\n</ul>\n\n<h3 id=\"props\">Props</h3>\n<ul>\n  <li>“Props” handles data from a parent component to a child component to customize/configure it.</li>\n</ul>\n\n<p>Let’s create components(funcitonal) to display comments:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// index.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span><span class=\"p\">;</span>\n<span class=\"c1\">// To insert a random image</span>\n<span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"s1\">'faker'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">CommentDetail</span> <span class=\"k\">from</span> <span class=\"s1\">'./CommentDetail'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"ui container comments\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t\t<span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Sam\"</span> \n\t\t\t\t<span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 4:30 PM\"</span> \n\t\t\t\t<span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"Nice to know!\"</span> \n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t\t<span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Alex\"</span> \n\t\t\t\t<span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 5:30 PM\"</span> \n\t\t\t\t<span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"I like what you wrote there.\"</span>\n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">CommentDetail</span> \n\t\t\t\t<span class=\"nx\">author</span><span class=\"o\">=</span><span class=\"s2\">\"Jane\"</span> \n\t\t\t\t<span class=\"nx\">timeAgo</span><span class=\"o\">=</span><span class=\"s2\">\"Today at 6:30 PM\"</span> \n\t\t\t\t<span class=\"nx\">content</span><span class=\"o\">=</span><span class=\"s2\">\"Nice blog post!\"</span>\n\t\t\t\t<span class=\"nx\">avatar</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">image</span><span class=\"p\">.</span><span class=\"nx\">avatar</span><span class=\"p\">()}</span><span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">'#root'</span><span class=\"p\">))</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// CommentDetail.js</span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"s1\">'faker'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentDetail</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"p\">(</span>\n\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"comment\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"avatar\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">img</span> <span class=\"nx\">alt</span><span class=\"o\">=</span><span class=\"s2\">\"avatar\"</span> <span class=\"nx\">src</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">avatar</span> <span class=\"p\">}</span>\n\t\t\t\t<span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"content\"</span><span class=\"o\">&gt;</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">a</span> <span class=\"nx\">href</span><span class=\"o\">=</span><span class=\"s2\">\"/\"</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"author\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">author</span> <span class=\"p\">}</span>\n\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/a</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"metadata\"</span><span class=\"o\">&gt;</span>\n\t\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">span</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"date\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">timeAgo</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/span</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">\"text\"</span><span class=\"o\">&gt;</span><span class=\"p\">{</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">content</span> <span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t\t<span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\t<span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// CommentDetail component has to be exported to be used in other components!</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">CommentDetail</span><span class=\"p\">;</span></code></pre></figure>\n\n<p>Output:\n<img src=\"/assets/img/posts/2018-12-18-comments.png\" alt=\"comments\" /></p>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } ,
   
      {
        "title"    : "React01 - Begin with JSX",
        "category" : "",
        "tags"     : " react",
        "url"      : "/udemy-react/2018/12/18/begin-with-JSX.html",
        "date"     : "December 18, 2018",
        "excerpt"  : "<p>ES2015 or 2016 JS is not guaranteed to be fully supported by a user’s browser. In order to use it normally, we need use Babel which takes ES2015 or 2016 and converts them into ES5 Javascript code. \n“React seperate concern with loosely coupled u...",
        "content"  : "<p>ES2015 or 2016 JS is not guaranteed to be fully supported by a user’s browser. In order to use it normally, we need use Babel which takes ES2015 or 2016 and converts them into ES5 Javascript code. \n“React seperate concern with loosely coupled units called “components” (not in seperate files) that contain markup and logic(from <a href=\"https://reactjs.org/docs/introducing-jsx.html\">React Doc</a>”). To do so, JSX can be useful to put UI and JavaScript code together. However, like ES2015 or 2016, a browser cannot understand natively JSX, so it needs to be converted to normal javascript code for a browser to render it with Babel.</p>\n\n<p>These two are the same, but different syntax:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// JSX</span>\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span><span class=\"nx\">Hi</span> <span class=\"nx\">there</span><span class=\"o\">!&lt;</span><span class=\"sr\">/div&gt;;</span><span class=\"err\"> \n</span><span class=\"p\">};</span>\n\n<span class=\"c1\">// ES5</span>\n<span class=\"kd\">var</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span>\n\t\t<span class=\"s2\">\"div\"</span><span class=\"p\">,</span>\n\t\t<span class=\"kc\">null</span><span class=\"p\">,</span>\n\t\t<span class=\"s2\">\"Hi there!\"</span>\n\t<span class=\"p\">);</span>\n<span class=\"p\">};</span></code></pre></figure>\n\n<h3 id=\"jsx-vs-html\">JSX VS. HTML</h3>\n<p>Custom styling with JSX:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"c1\">// HTML </span>\n<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"s2\">\"background-color: red;\"</span><span class=\"o\">&gt;&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\n<span class=\"c1\">// JSX</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=&gt;&lt;</span><span class=\"sr\">/div&gt;</span></code></pre></figure>\n\n<p>Different element attributes:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\">// HTML \n<span class=\"nt\">&lt;label</span> <span class=\"na\">class=</span><span class=\"s\">\"label\"</span> <span class=\"na\">for=</span><span class=\"s\">\"name\"</span><span class=\"nt\">&gt;</span>Name:<span class=\"nt\">&lt;/label&gt;</span>\n\n// JSX\n<span class=\"nt\">&lt;label</span> <span class=\"na\">className=</span><span class=\"s\">\"label\"</span> <span class=\"na\">htmlFor=</span><span class=\"s\">\"name\"</span><span class=\"nt\">&gt;</span>Name:<span class=\"nt\">&lt;/label&gt;</span></code></pre></figure>\n\n<p>JSX with JS variables:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-javascript\" data-lang=\"javascript\"><span class=\"kd\">const</span> <span class=\"nx\">buttonText</span> <span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"na\">text</span><span class=\"p\">:</span> <span class=\"s1\">'Click Me!'</span> <span class=\"p\">};</span>\n<span class=\"kd\">const</span> <span class=\"nx\">style</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">backgroundColor</span><span class=\"p\">:</span> <span class=\"s1\">'blue'</span><span class=\"p\">,</span> <span class=\"na\">color</span><span class=\"p\">:</span> <span class=\"s1\">'white'</span> <span class=\"p\">};</span>\n\n<span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{</span> <span class=\"nx\">style</span> <span class=\"p\">}</span><span class=\"o\">&gt;</span>\n\t<span class=\"p\">{</span> <span class=\"nx\">buttonText</span><span class=\"p\">.</span><span class=\"nx\">text</span> <span class=\"p\">}</span>\n<span class=\"o\">&lt;</span><span class=\"sr\">/button&gt;</span></code></pre></figure>\n\n<p>The source of this post and code is from <a href=\"https://www.udemy.com/react-redux/\">Modern React with Redux</a>, also from <a href=\"https://reactjs.org/docs/getting-started.html\">React Doc</a>.</p>\n\n"
      } 
   
   ,
   
     {
       
          "title"    : "Creative",
          "category" : "",
          "tags"     : " Ipsum",
          "url"      : "/portfolio/safe",
          "date"     : "August 16, 2014",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Tic tac toe",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/tictactoe",
          "date"     : "September 1, 2014",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Lorem Ipsum",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/submarine",
          "date"     : "September 3, 2017",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } 
   
  
]